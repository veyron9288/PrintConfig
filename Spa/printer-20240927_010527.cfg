
[include fluidd.cfg]
# [include adxl.cfg]
[exclude_object]
[gcode_arcs]
resolution: 0.1
[force_move]
enable_force_move: true


[mcu]
# serial: /dev/serial/by-id/usb-Klipper_rp2040_E66138D8D31B362E-if00
serial: /dev/serial/by-id/usb-Klipper_rp2040_E66138D8D3239E2E-if00

[printer]
kinematics: cartesian
max_velocity: 300       # 最大速度
max_accel: 20000    	# 最大加速度
max_z_velocity: 10 	    # z轴最大速度
max_z_accel: 300   		# z轴最大加速度


[stepper_x]
step_pin: gpio10
dir_pin: !gpio11
enable_pin: !gpio2
microsteps: 16
rotation_distance: 40
full_steps_per_rotation: 200
endstop_pin: ^gpio13
position_endstop: 0
position_max: 150
homing_speed: 100
homing_retract_speed: 10
homing_retract_dist: 5

[tmc2209 stepper_x]
uart_pin: gpio9
uart_address: 0
interpolate: True
run_current: 1.10
hold_current: 0.800
sense_resistor: 0.110
stealthchop_threshold: 0

[stepper_y]
step_pin: gpio5
dir_pin: !gpio6
enable_pin: !gpio2
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 200
endstop_pin: ^gpio14
position_endstop: 0
position_max: 150
homing_speed: 100
homing_retract_speed: 10
homing_retract_dist: 5

[tmc2209 stepper_y]
uart_pin: gpio9
uart_address: 1
interpolate: True
run_current: 1.10
hold_current: 0.800
sense_resistor: 0.110
stealthchop_threshold: 0

[stepper_z]
step_pin: gpio3
dir_pin: gpio4
enable_pin: !gpio2
# endstop_pin: ^gpio15
endstop_pin:probe:z_virtual_endstop
microsteps: 16
rotation_distance: 4
full_steps_per_rotation: 200
position_max: 140
position_min: -10
# homing_speed: 10
# second_homing_speed: 3
# homing_retract_dist: 3

[tmc2209 stepper_z]
uart_pin: gpio12
uart_address: 0
interpolate: False
run_current: 0.800
hold_current: 0.400
stealthchop_threshold: 999999

[extruder]
step_pin: gpio1
dir_pin: !gpio0
enable_pin: !gpio2
microsteps: 16
# rotation_distance: 22.2606
rotation_distance: 22.757
gear_ratio: 50:10
full_steps_per_rotation: 200
nozzle_diameter: 0.400
filament_diameter: 1.750
min_temp: 0
max_temp: 270
heater_pin: gpio23
sensor_type: Generic 3950
sensor_pin: gpio27
max_power: 1.0
#control: pid                #校准在控制台输入PID_CALIBRATE HEATER=extruder TARGET=200
#pid_Kp: 28.182
#pid_Ki: 1.978
#pid_Kd: 100.397
# pressure_advance: 0.035
# pressure_advance_smooth_time: 0.040
#本机PA参考值
# 以样 0.18
# 阿特蓝petg 0.06
# 兰博pla 0.13（白） 0.08（蓝）

[tmc2209 extruder]
uart_pin: gpio12
uart_address: 1
interpolate: True
run_current: 0.800
hold_current: 0.500
sense_resistor: 0.110
stealthchop_threshold: 999999


[probe]
pin: gpio15
# x_offset: 20.7             #接近开关与喷嘴在X方向的距离
# y_offset: 6.5              #接近开关与喷嘴在Y方向的距离
#z_offset: 0.00            #平台与喷嘴之间的距离，进行Z轴校准的时候自动更改
speed: 10.0 # 调平速度
samples: 3 # 采样次数
samples_result: median # 取值⽅式（默认median-中位数）
sample_retract_dist: 4.0 # 调平回缩距离
samples_tolerance: 0.0075 # 采样公差（注意过⼩的值可能造成采样次数增加）
samples_tolerance_retries: 3 # 超公差重试次数
activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}


[safe_z_home]
home_xy_position:75,75    #Z归位时的X，Y坐标（例如100，100），在这个坐标上进行Z归位。
speed: 100                  #工具头移动到安全Z原点的速度，默认为50毫米/秒
z_hop: 10                   #在归位前抬升Z轴的距离（mm）。这将用于任何归位命令，即使它没有将Z轴归位。
z_hop_speed: 15            #在归位之前，Z轴抬升的速度（单位：mm/s），默认为15mm/s。
move_to_previous: true     #当设置为 "True "时，X轴和Y轴在Z轴归位后会重置到之前的位置，默认为false。
				
[bed_mesh]
speed: 50                  #非测试时候的xy移动速度，即这个点到下个点之间的移动速度
horizontal_move_z: 10      #Z轴抬升高度
mesh_min: 20,20             #第一个探测的坐标，最接近原点。该坐标是相对于探针的位置的
mesh_max: 130,130 
probe_count: 5,5           #采样点数（4X4为16点）
algorithm: bicubic         #要使用的插值算法，可以是"lagrange"或者"bicubic"。当探测点为3*3强制使用lagrange，默认值是lagrange
bicubic_tension: 0.2       #算法插值不要动
mesh_pps: 2,2              #补充采样点数 


[heater_bed]
heater_pin: gpio21
sensor_type: Generic 3950
sensor_pin: gpio26
max_power: 1.0
#control: pid         #校准在控制台输入PID_CALIBRATE HEATER=bed TARGET=50
#pid_Kp: 54.027
#pid_Ki: 0.770
#pid_Kd: 948.182
min_temp: 0
max_temp: 130

[temperature_sensor MCU]
sensor_type: temperature_mcu

[temperature_sensor SoC]
sensor_type: temperature_host

[fan]#吹料风扇
pin: gpio16
kick_start_time: 0.75   #风扇启动时全速运行时间，防止风扇无法克服阻力开始转动
max_power: 1.0
shutdown_speed: 0


# [fan_generic extruder_partfan]
# pin: !gpio16
# kick_start_time: 0.75   #风扇启动时全速运行时间，防止风扇无法克服阻力开始转动
# max_power: 1.0
# shutdown_speed: 0



[heater_fan 喉管风扇]
pin: gpio18
max_power: 1.0
heater: extruder
heater_temp: 60.0
fan_speed: 1.0
shutdown_speed: 0

[fan_generic 主板风扇]#吹料风扇
pin: gpio22
kick_start_time: 0.75   #风扇启动时全速运行时间，防止风扇无法克服阻力开始转动
max_power: 1.0
shutdown_speed: 0

[virtual_sdcard]
path: /home/klipper/printer_data/gcodes

[gcode_macro G32]
gcode:
    G28
    
    ## For 300 build
    G0 X0 Y0 Z30 F3600

[gcode_macro PRINT_START]
#   PRINT_START EXTRUDER=255 BED=80
#   PRINT_START EXTRUDER=255 BED=80 Chamber=0 PRINT_MIN=120.301,120.301 PRINT_MAX=179.699,179.699
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.EXTRUDER|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}

    # 等待热端加热到设定温度
    M109 S150
    # 等待热床加热到设定温度
    M190 S{bedtemp}

    # 擦嘴
    
    G32                            ; home all axes

    # 加载床网
    BED_MESH_PROFILE LOAD=default

    # 等待热端加热到设定温度
    M109 S{hotendtemp}
        
    # 擦嘴
    NOOZLE_CLEAN
    M117 PRINTING...
    
[gcode_macro NOOZLE_CLEAN]
gcode:
    G90 ; 绝对定位
    M83 ; 相对挤出
    G92 E0
    G1 X10.0 Y5.0 Z0.8 F18000 ; 起始点    
    G1 Z0.2    
    G0 E5 F300 ; 回抽补偿    
    G0 E2 F300 ; 提前挤出
    G0 X130 E15 F{9/(0.3*0.5) * 60}
    G0 Y15 E0.700 F{9/(0.3*0.5)/ 4 * 60}
    G0 X129.5
    G0 E0.2
    G0 Y5.5 E0.700
    G0 X121 E0.700 F{9/(0.3*0.5) * 60}
    M400

    ;G1 E-0.8 F1800 ; 回抽
    ;G1 X150.0 Y295.0 Z0.2 F24000.0 ; Move to start position
    ;G1 E0.8 F1800
    ;G0 X276 E6.4 F{9/(0.3*0.6) * 60}
    ;G0 Y170 E6.4
    ;G0 X275.5
    ;G0 Y294.5 E6.4
    ;G0 X150 E6.4

    ;M400 ; wait for buffer to clear
    G92 E0 ; zero the extruder
    G1 E-0.4 F1800 ; 回抽

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 150.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 20.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
# variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
# variable_speed_unretract  : 35.0  ; unretract speed in mm/s
# variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 200.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
gcode:

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}
  
# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
  
##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(15) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
  
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_retract)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro PRINT_END]# 将 PRINT_END 设置为打印结束时的宏，自定义打印完成之后动作
gcode:

    M400
    G92 E0
    G1 E-8.0 F3600
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107
    G1 Z2 F3000
    G90
    G1 Y140 Z100 F20000
    M84
    BED_MESH_CLEAR


[gcode_macro TI_LIAO]
gcode:
    G1 Y15 X130 F18000
    M104 S220
    M109 S220
    M106 S255
    G1 Z2.5 F600
    G92 E0
    G1 E40 F600
    M104 S0
    G1 Z5 F10
    G1 X90 F18000
    G1 Z1 F300
    G1 X140 F33000
    G1 Z30 F2400
    G1 Y75 X75 F18000
    M107

[idle_timeout]
# 空闲时间 加热开启空闲1800秒自动关闭
timeout: 1800

#######M84三件套#######
#允许未回零操作电机(支持手动移动步进电机进行诊断。)
#官方用法的指令非常长不建议使用（FORCE_MOVE stepper=stepper_x distance=1 velocity=100 accel=300）


#重写解锁电机的M84指令，然后设置当前位置（类似G92指定位置；强制设定低级运动学代码使用的打印头位置。）
#官方用法为：SET_KINEMATIC_POSITION [X=<值>] [Y=<值>] [Z=<值>]
#不指定坐标就是等于当前面板上的坐标
[gcode_macro M84]
rename_existing: M84.1
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
  SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
  SET_STEPPER_ENABLE STEPPER=stepper_z enable=0
  #SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=0
  SET_STEPPER_ENABLE STEPPER=extruder enable=0
  SET_KINEMATIC_POSITION

#开机后设定当前位置（解锁保护）
[delayed_gcode KINEMATIC_POSITION]
initial_duration:0.2
gcode:
  SET_KINEMATIC_POSITION

#######M84三件套-结束#######

#   The path of the local directory on the host machine to look for
#   g-code files. This is a read-only directory (sdcard file writes
#   are not supported). One may point this to OctoPrint's upload
#   directory (generally ~/.octoprint/uploads/ ). This parameter must
#   be provided.
#on_error_gcode:
#   A list of G-Code commands to execute when an error is reported.

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 36.674
#*# pid_ki = 8.732
#*# pid_kd = 38.508
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 70.405
#*# pid_ki = 0.976
#*# pid_kd = 1269.927
#*#
#*# [stepper_z]
#*# position_endstop = 0.310
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.063750, -0.071250, -0.066250, -0.081250, -0.072500
#*# 	  -0.077500, -0.046250, -0.047500, -0.081250, -0.068750
#*# 	  -0.061250, -0.065000, -0.047500, -0.075000, -0.080000
#*# 	  -0.048750, -0.066250, -0.048750, -0.103750, -0.108750
#*# 	  -0.037500, -0.063750, -0.065000, -0.091250, -0.117500
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 20.0
#*# max_x = 130.0
#*# min_y = 20.0
#*# max_y = 130.0
#*#
#*# [probe]
#*# z_offset = -0.270
#*#
#*# [input_shaper]
#*# shaper_type_y = ei
#*# shaper_freq_y = 50.8
#*# shaper_type_x = zv
#*# shaper_freq_x = 104.4
